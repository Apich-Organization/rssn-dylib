name: CI & AI Review

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build with full features
        run: cargo build --features full --verbose

      - name: Check formatting
        run: cargo fmt --all --check

---

  ai-review:
    needs: build-and-fmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get git diff
        run: |
          git fetch origin ${{ github.base_ref }}
          git diff origin/${{ github.base_ref }}...HEAD | head -c 30000 > diff.txt

      - name: Select random API key and mask it (Security Enhancement)
        id: pick-key
        run: |
          keys=( "${{ secrets.API_KEY1 }}" "${{ secrets.API_KEY2 }}" "${{ secrets.API_KEY3 }}" )
          idx=$((RANDOM % ${#keys[@]}))
          SELECTED_KEY=${keys[$idx]}
          
          echo "::add-mask::$SELECTED_KEY"
          
          # This sets the GEMINI_API_KEY as an environment variable for subsequent steps
          echo "GEMINI_API_KEY=$SELECTED_KEY" >> $GITHUB_ENV

      - name: Call Gemini API
        id: ai-call
        # Line 67 (original file) was the issue. 
        # When accessing an environment variable set via $GITHUB_ENV, 
        # you just use the variable name under `env:`.
        env:
          GEMINI_API_KEY: ${{ env.GEMINI_API_KEY }}  
        run: |
          PROMPT=$(cat <<'EOF'
System Role:
    You are an automated Code Quality Reviewer for the 'rssn' project, a comprehensive Rust computational library. Your task is to provide a concise, technical evaluation of the provided git diff focusing on security implications, performance impact, idiomatic Rust, and overall code quality.
Instruction and Output Format:
    After your brief technical evaluation, you MUST include one of the following numerical codes as the final line of your output to determine the automated action:
        0x001: If the changes are UNACCEPTABLE and should be rejected (e.g., severe security risk, major performance regression, or broken logic).
        0x002: If the changes require MANDATORY HUMAN REVIEW (e.g., highly complex algorithms, significant architecture changes).
        0x003: If the changes are ACCEPTABLE and can be merged (e.g., minor fixes, clean refactors, no noticeable negative impact). EOF
          )
          
          DIFF=$(cat diff.txt)
          
          BODY=$(jq -n --arg prompt "$PROMPT" --arg diff "$DIFF" \
            '{contents: [{role:"user", parts:[{text: ($prompt + "\n\nGIT DIFF:\n" + $diff)}]}]}')

          # Note: The original 'Authorization' header was 'Bearer $GEMINI_API_KEY'. 
          # For Google's official Gemini API, the 'Authorization: Bearer' header 
          # is not typically used for a direct API key; the key is usually passed 
          # as a query parameter in the URL.
          # Assuming the provided API endpoint and key usage is based on a specific 
          # setup or proxy, the rest of the cURL command is kept as is to 
          # preserve the original logic.
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "x-goog-api-key: $GEMINI_API_KEY" \
            -d "$BODY" \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent")

          if echo "$RESPONSE" | jq -e '.candidates[0].content.parts[0].text' > /dev/null; then
            CLEAN_RESPONSE=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
            echo "ai_review_text=$CLEAN_RESPONSE" >> $GITHUB_OUTPUT
          else
            echo "::error title=API Call Failed::Gemini API call failed or returned an invalid response."
            echo "ai_review_text=Gemini API call failed. Forcing mandatory human review.\n0x002" >> $GITHUB_OUTPUT
          fi
          
      - name: Parse AI response
        id: parse-ai
        run: |
          AI_REVIEW_TEXT="${{ steps.ai-call.outputs.ai_review_text }}"
          echo "$AI_REVIEW_TEXT" > ai_review.txt
          cat ai_review.txt

          if grep -q "0x001" ai_review.txt; then
            echo "decision=reject" >> $GITHUB_OUTPUT
          elif grep -q "0x002" ai_review.txt; then
            echo "decision=human" >> $GITHUB_OUTPUT
          elif grep -q "0x003" ai_review.txt; then
            echo "decision=approve" >> $GITHUB_OUTPUT
          else
            # Default to human review if no code is found
            echo "decision=comment" >> $GITHUB_OUTPUT 
          fi
      
      - name: Take action
        env:
          GH_TOKEN_REVIEW: ${{ secrets.ACCESS_TOKEN_REVIEW }}
          GH_TOKEN_COMMENT: ${{ secrets.ACCESS_TOKEN_COMMENT }}
          ENABLE_AI_REVIEW: ${{ secrets.ENABLE_AI_REVIEW }}
        run: |
          REVIEW_BODY=$(cat ai_review.txt)
          DIFF_LINES=$(wc -l < diff.txt)
          PR_NUMBER=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          DECISION="${{ steps.parse-ai.outputs.decision }}"

          if [[ "$DECISION" == "reject" ]]; then
            # Request changes on the PR
            gh pr review "$PR_NUMBER" --request-changes --body "$REVIEW_BODY" --repo "$REPO" --token "$GH_TOKEN_REVIEW"
          
          elif [[ "$DECISION" == "approve" ]]; then
            # Conditional auto-approval: small diff AND feature is enabled
            if [[ "$DIFF_LINES" -lt 20 && "$ENABLE_AI_REVIEW" == "1" ]]; then
              gh pr review "$PR_NUMBER" --approve --body "$REVIEW_BODY" --repo "$REPO" --token "$GH_TOKEN_REVIEW"
            else
              # If conditions aren't met, just comment
              gh pr comment "$PR_NUMBER" --body "$REVIEW_BODY" --repo "$REPO" --token "$GH_TOKEN_COMMENT"
            fi
            
          else
            # For 'human' (0x002) and 'comment' (missing code), just comment
            gh pr comment "$PR_NUMBER" --body "$REVIEW_BODY" --repo "$REPO" --token "$GH_TOKEN_COMMENT"

          fi
